diff --git a/src/include/switch_channel.h b/src/include/switch_channel.h
index 86d6769..ecb2114 100644
--- a/src/include/switch_channel.h
+++ b/src/include/switch_channel.h
@@ -320,6 +320,7 @@ SWITCH_DECLARE(switch_status_t) switch_channel_get_variables(switch_channel_t *c
 
 SWITCH_DECLARE(switch_status_t) switch_channel_pass_callee_id(switch_channel_t *channel, switch_channel_t *other_channel);
 
+SWITCH_DECLARE(switch_status_t) switch_channel_move_variables_with_prefix(switch_channel_t *channel, switch_event_t **event_ptr, char* prefix);
 
 static inline int switch_channel_var_true(switch_channel_t *channel, const char *variable) {
 	return switch_true(switch_channel_get_variable_dup(channel, variable, SWITCH_FALSE, -1));
diff --git a/src/switch_channel.c b/src/switch_channel.c
index 09fefa1..4ade4bf 100644
--- a/src/switch_channel.c
+++ b/src/switch_channel.c
@@ -4324,6 +4324,59 @@ SWITCH_DECLARE(switch_status_t) switch_channel_get_variables(switch_channel_t *c
 	return status;
 }
 
+SWITCH_DECLARE(switch_status_t) switch_channel_move_variables_with_prefix(switch_channel_t *channel, switch_event_t **event_ptr, char* prefix)
+{
+	switch_status_t res = SWITCH_STATUS_SUCCESS;
+	switch_event_header_t *hi = NULL;
+	switch_event_header_t *lp = NULL;
+	switch_event_t *event = *event_ptr;
+
+	if(!event) {
+		if((res = switch_event_create_plain(event_ptr, SWITCH_EVENT_CHANNEL_DATA)) != SWITCH_STATUS_SUCCESS) {
+			return res;
+		}
+		event = *event_ptr;
+	}
+
+	if (!channel->variables) {
+		return res;
+	}
+
+	if ((hi = switch_channel_variable_first(channel))) {
+		while(hi) {
+			if (zstr(prefix) || !strncasecmp(hi->name, prefix, strlen(prefix))) {
+				switch_event_header_t *move = hi;
+				if (lp) {
+					lp->next = hi->next;
+				} else {
+					channel->variables->headers = hi->next;
+				}
+				if (hi == channel->variables->last_header || !hi->next) {
+					channel->variables->last_header = lp;
+				}
+
+				hi = hi->next;
+
+				if (event->last_header) {
+					event->last_header->next = move;
+				} else {
+					event->headers = move;
+					move->next = NULL;
+				}
+				event->last_header = move;
+			} else {
+				lp = hi;
+				hi = hi->next;
+			}
+
+
+		}
+		switch_channel_variable_last(channel);
+	}
+
+	return res;
+}
+
 SWITCH_DECLARE(switch_core_session_t *) switch_channel_get_session(switch_channel_t *channel)
 {
 	switch_assert(channel);
diff --git a/src/switch_ivr_async.c b/src/switch_ivr_async.c
index 866601b..35caceb 100644
--- a/src/switch_ivr_async.c
+++ b/src/switch_ivr_async.c
@@ -1058,6 +1058,7 @@ struct record_helper {
 	uint32_t writes;
 	uint32_t vwrites;
 	const char *completion_cause;
+	switch_event_t *variables;
 };
 
 /**
@@ -1116,6 +1117,7 @@ static void send_record_stop_event(switch_channel_t *channel, switch_codec_imple
 	if (switch_event_create(&event, SWITCH_EVENT_RECORD_STOP) == SWITCH_STATUS_SUCCESS) {
 		switch_channel_event_set_data(channel, event);
 		switch_event_add_header_string(event, SWITCH_STACK_BOTTOM, "Record-File-Path", rh->file);
+		switch_event_merge(event, rh->variables);
 		if (!zstr(rh->completion_cause)) {
 			switch_event_add_header_string(event, SWITCH_STACK_BOTTOM, "Record-Completion-Cause", rh->completion_cause);
 		}
@@ -1218,8 +1220,9 @@ static switch_bool_t record_callback(switch_media_bug_t *bug, void *user_data, s
 			}
 
 			if (switch_event_create(&event, SWITCH_EVENT_RECORD_START) == SWITCH_STATUS_SUCCESS) {
-				switch_event_add_header_string(event, SWITCH_STACK_BOTTOM, "Record-File-Path", rh->file);
 				switch_channel_event_set_data(channel, event);
+				switch_event_add_header_string(event, SWITCH_STACK_BOTTOM, "Record-File-Path", rh->file);
+				switch_event_merge(event, rh->variables);
 				switch_event_fire(&event);
 			}
 
@@ -2798,6 +2801,8 @@ SWITCH_DECLARE(switch_status_t) switch_ivr_record_session(switch_core_session_t
 		}
 	}
 
+	switch_channel_move_variables_with_prefix(channel, &rh->variables, "RECORDING-VARIABLE-");
+
 	rh->hangup_on_error = hangup_on_error;
 
 	if ((status = switch_core_media_bug_add(session, "session_record", file,
